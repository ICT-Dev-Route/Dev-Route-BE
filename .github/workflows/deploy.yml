name: Docker 이미지 만들기

# 이벤트: 실행되는 시점을 정의합니다
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# 여러 개의 job을 정의할 수 있으며, 여기서는 하나의 job만 정의합니다.
jobs:
  My-Deploy-Job:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 실행
    steps:
      - name: 코드 체크아웃  # GitHub 리포지토리의 소스 코드를 가져옵니다
        uses: actions/checkout@v3  # GitHub의 공식 액션 사용
        with:
          submodules: recursive  # 서브모듈 포함 체크아웃
          token: ${{ secrets.PAT_TOKEN }}  # Private Access Token 사용

      - name: JDK 17 설치  # JDK 17을 설치하여 Java 환경을 설정합니다
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Java 17 사용
          distribution: 'temurin'  # Temurin 배포판 사용

      - name: Spring 프로젝트 빌드  # Spring 프로젝트를 빌드합니다
        run: |
          cd ./dev-route/
          chmod +x ./gradlew  # gradlew 파일에 실행 권한 부여
          ./gradlew clean build -x test  # 테스트 제외하고 빌드 실행

      - name: Docker 레이어 캐시  # Docker 레이어 캐싱으로 CPU 사용률 최적화
        uses: actions/cache@v2  # GitHub Actions 캐시 액션 사용
        with:
          path: /tmp/.buildx-cache  # Docker 빌드 캐시를 저장할 경로
          key: ${{ runner.os }}-buildx-${{ github.sha }}  # 캐시 키 설정
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker 이미지 생성 및 DockerHub에 푸시  # Docker 이미지를 빌드하고 DockerHub에 푸시합니다
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}  # DockerHub 로그인
          cd ./dev-route/  # dev-route 디렉토리로 이동
          docker build --cache-from type=local,src=/tmp/.buildx-cache -t ${{ secrets.DOCKER_REPO }}/devroute-server:${{ github.sha }} .  # Docker 이미지 빌드 (캐시 활용)
          docker push ${{ secrets.DOCKER_REPO }}/devroute-server:${{ github.sha }}  # DockerHub에 이미지 푸시

      - name: EC2에서 이미지 pull 후 컨테이너 실행  # EC2 서버에서 Docker 이미지 pull 후 컨테이너 실행
        uses: appleboy/ssh-action@master  # EC2 서버에 SSH 접속 후 명령 실행
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스 호스트 정보
          username: ${{ secrets.EC2_SSH_USER }}  # SSH 접속 사용자 이름
          key: ${{ secrets.PRIVATE_KEY }}  # SSH 프라이빗 키
          script: |  # EC2에서 실행할 스크립트
            docker rm -f $(docker ps -qa)  # 실행 중인 모든 컨테이너 제거
            docker pull ${{ secrets.DOCKER_REPO }}/devroute-server:${{ github.sha }}  # 새로운 Docker 이미지 pull
            docker run -d -p 8080:8080 -e "SPRING_PROFILES_ACTIVE=prod" ${{ secrets.DOCKER_REPO }}/devroute-server:${{ github.sha }}  # 새 컨테이너 실행
